C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node *prev, *next;
};

// Function to create a new node with given data
struct Node* getNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = newNode->next = NULL;
    return newNode;
}

// Function to print the doubly linked list
void printList(struct Node* head) {
    while (head != NULL) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}




class Solution {
public:
    Node* sortedInsert(Node* head, int x) {
        Node* newNode = getNode(x);

        // If the list is empty, return newNode as head
        if (!head) return newNode;

        // If the new node should be the new head
        if (x <= head->data) {
            newNode->next = head;
            head->prev = newNode;
            return newNode;
        }

        // Traverse the list to find the correct insertion point
        Node* current = head;
        while (current->next && current->next->data < x) {
            current = current->next;
        }

        // Insert the new node at the found position
        newNode->next = current->next;
        if (current->next) {
            current->next->prev = newNode;
        }
        current->next = newNode;
        newNode->prev = current;

        return head;
    }
};




int main() {
    int t;
    cin >> t;
    cin.ignore(); // Ignore the newline character after t
    while (t--) {
        string input;
        getline(cin, input); // Read the entire line for the array elements
        stringstream ss(input);
        Node *head = nullptr, *tail = nullptr;
        int x;

        // Read the linked list elements from the input
        if (ss >> x) {
            head = getNode(x);
            tail = head;
            while (ss >> x) {
                tail->next = getNode(x);
                tail->next->prev = tail;
                tail = tail->next;
            }
        }

        // Read the value to be inserted
        int valueToInsert;
        cin >> valueToInsert;
        cin.ignore(); // Ignore the newline character after the value

        Solution obj;
        head = obj.sortedInsert(head, valueToInsert);
        printList(head);
    }
    return 0;
}
